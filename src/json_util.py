import pandas as pd
import numpy as np
import json

# df utilities

def findCategory(data):
    # find categories
    cats = data["categories"]
    category = pd.DataFrame(cats)
    category = category.drop(['supercategory'], axis=1)
    category = category.rename(columns={'id': 'category_id'})
    return category

def findImages(data):
    img = data["images"]
    images = pd.DataFrame(img)
    
    # unwanted columns exist if exported from CVAT. Not if generated by my code
    if set(['license','flickr_url','coco_url','date_captured']).issubset(images.columns):
        images = images.drop(columns=['license','flickr_url','coco_url','date_captured'])
    
    return images

def findAnnotations(data):
    anno = data["annotations"]
    df = pd.DataFrame(anno)
    return df

def cleanForJson(category=None, df=None):
    # clean category for json dump
    if category is not None:
        category = category.rename(columns={'category_id': 'id'})
        category['supercategory'] = ""

    # add columns in df for json dump
    if df is not None:
        df['iscrowd'] = 0
        df['attributes'] = [{'occluded':False}] * len(df['id'])
        cols = ['id', 'image_id', 'category_id', 'segmentation', 'area', 'bbox', 'iscrowd', 'attributes']
        df = df[cols + [c for c in df.columns if c not in cols]]
        # remove file_name column in df if it exists
        df = drop_columns_if_exist(df,columns=['file_name', 'file_name_x', 'file_name_y'])

    return category, df

def createDF(filename):
    with open(filename, 'r') as file:
        data = json.load(file)
        
        category = findCategory(data)
        images = findImages(data)
        nos_image = images['id'].max()
        df = findAnnotations(data)
        df = df.merge(images[['id','file_name']], left_on='image_id', right_on='id')
        df = df.rename(columns={'id_x': 'id'})
        df = drop_columns_if_exist(df,columns=['iscrowd','attributes','id_y'])
        return category, images, df

def drop_columns_if_exist(df, columns):
    df = df.copy()
    for col in columns:
        if col in df.columns:
            df = df.drop(columns=col)
    return df

# convert all np.integer, np.floating and np.ndarray into json recognisable int, float and lists
class NpEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, np.integer):
            return int(obj)
        if isinstance(obj, np.floating):
            return float(obj)
        if isinstance(obj, np.ndarray):
            return obj.tolist()
        return json.JSONEncoder.default(self, obj)

# bbox and mask utilities
def process_bbox(box):
    x1, y1, x2, y2 = box['x1'], box['y1'], box['x2'], box['y2']
    bbox = [x1, y1, x2-x1, y2-y1]       # x,y,w,h in COCO format
    bbox = [round(x,2) for x in bbox]
    return bbox   

def process_segment(segment):
    xs = segment['x']
    ys = segment['y']
    assert len(xs) == len(ys), "Length of xs and ys do not match"
    segment_list = []
    for i in range(len(xs)):
        segment_list.extend([round(xs[i],2), round(ys[i],2)])
    return [segment_list]

def calculate_area(coords):
    coords = coords[0]      # segmentation in [[x1,y1,x2,y2,...]] format
    x = coords[::2]
    y = coords[1::2]
    area = 0.5 * abs(sum(x[j]*y[j+1] - x[j+1]*y[j] for j in range(-1, len(x)-1)))
    area = round(area,2)
    return area